//Empty C++ Application
#include <stdio.h>
#include "xil_types.h"
#include "xtmrctr.h"
#include "xparameters.h"

#include "xil_io.h"
#include "xil_exception.h"
#include "xscugic.h"
#include "xil_mmu.h"
#include <cstdlib>

#include "xuartps.h"
#include <string>
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR

volatile bool TIMER_INTR_FLG;
XScuGic InterruptController; /* Instance of the Interrupt Controller */
static XScuGic_Config *GicConfig;/* The configuration parameters of thecontroller */
int NUM_BYTES_BUFFER = 5242880;

extern uint8_t gh_menu[];
extern int gh_menu_size;
extern uint8_t gh_pause[];
extern int gh_pause_size;
extern uint8_t gh_gameplay[];
extern int gh_gameplay_size;

void Timer_InterruptHandler(XTmrCtr *data, u8 TmrCtrNumber)
{
	XTmrCtr_Stop(data,TmrCtrNumber);
	XTmrCtr_Reset(data,TmrCtrNumber);
	//Update Stuff
	TIMER_INTR_FLG = true;
}

int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr){
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler) XScuGic_InterruptHandler,
	XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}

/*Setup all interrupts of the system*/
int ScuGicInterrupt_Init(u16 DeviceId,XTmrCtr *TimerInstancePtr)
{
	int Status;
	GicConfig = XScuGic_LookupConfig(DeviceId);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
	GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*Connect a device driver handler that will be called when an interrupt for the device occurs, the device driver handler performs the specific interrupt processing for the device*/
	Status = XScuGic_Connect(&InterruptController,
	61,
	(Xil_ExceptionHandler)XTmrCtr_InterruptHandler,
	(void *)TimerInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

// use wmset to write faster
// write twice to get rid of artifacting (the fuzzyness at the bottom)
//void write_pixel_by_pixel(int* image_buffer_pointer)
//{
//	int counter = 0;
//	for (int i : BEAUTIFUL_GUY)
//	{
////		image_buffer_pointer[counter] = 0xFFFFFF;
//		image_buffer_pointer[counter] = i;
//		counter++;
//	}
//}

//void load_image_1(int* image_buffer_pointer)
//{
//	memcpy(image_buffer_pointer, &GUITAR_HERO_MENU, sizeof(GUITAR_HERO_MENU));
//}

//void load_image_2(int* image_buffer_pointer)
//{
//	memcpy(image_buffer_pointer, &GUITAR_HERO_GAMEPLAY, sizeof(GUITAR_HERO_GAMEPLAY));
//}

//void load_image_3(int* image_buffer_pointer)
//{
//	memcpy(image_buffer_pointer, &GUITAR_HERO_PAUSE, sizeof(GUITAR_HERO_PAUSE));
//}

void menu(int* image_buffer_pointer){
	u8 inp = 0x00;
	u32 CntrlRegister;

	XUartPs_WriteReg(UART_BASEADDR, XUARTPS_CR_OFFSET,
				  ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
				   XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));

	xil_printf("\r\n\r\n");
	xil_printf("MILESTONE 1!\r\n");
	xil_printf("Enter '1' '2' or '3'\r\n");
	xil_printf("----------------------------------------\r\n");

	// Wait for input from UART via the terminal
	while (!XUartPs_IsReceiveData(UART_BASEADDR));
				inp = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
	// Select function based on UART input
	switch(inp){
	case '1':
		xil_printf("Loading image 1\r\n");
		xil_printf("Press 'q' to return to the main menu\r\n");

		memcpy(image_buffer_pointer, &gh_menu, gh_menu_size);
		break;
	case '2':
		xil_printf("Loading image 2\r\n");
		xil_printf("Press 'q' to return to the main menu\r\n");

		memcpy(image_buffer_pointer, &gh_pause, gh_pause_size);
		break;
	case '3':
		xil_printf("Loading image 3\r\n");
		xil_printf("Press 'q' to return to the main menu\r\n");

		memcpy(image_buffer_pointer, &gh_gameplay, gh_gameplay_size);
		break;
	default:
		menu(image_buffer_pointer);
		break;
	} // switch
} // menu()


int main()
{
	XTmrCtr TimerInstancePtr;
	int xStatus;
	//-----------Setup Timer Interrupt---------------------------------------

	xStatus = XTmrCtr_Initialize(&TimerInstancePtr,XPAR_AXI_TIMER_0_DEVICE_ID);

	XTmrCtr_SetHandler(&TimerInstancePtr,
	(XTmrCtr_Handler)Timer_InterruptHandler,
	&TimerInstancePtr);

	//Reset Values
	XTmrCtr_SetResetValue(&TimerInstancePtr,
	0, //Change with generic value
	//0xFFF0BDC0);
	//0x23C34600);
	0xDC3CB9FF);
	//Interrupt Mode and Auto reload
	XTmrCtr_SetOptions(&TimerInstancePtr,
	XPAR_AXI_TIMER_0_DEVICE_ID,
	(XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION ));

	xStatus=ScuGicInterrupt_Init(XPAR_PS7_SCUGIC_0_DEVICE_ID,&TimerInstancePtr);

	/*Enable the interrupt for the device and then cause (simulate) an interrupt so the handlers will be called*/
	XScuGic_Enable(&InterruptController, 61);
	XScuGic_SetPriorityTriggerType(&InterruptController, 61, 0xa0, 3);
	int loop = 0;
	int * image_buffer_pointer = (int *)0x00900000;

	while(1) {
//		XTmrCtr_Start(&TimerInstancePtr,0);
//		while(TIMER_INTR_FLG == false){
//		}
//
//		TIMER_INTR_FLG = false;

		menu(image_buffer_pointer);

//		memcpy(image_buffer_pointer, &gh_menu, gh_menu_size);
	}
	return 0;
}

