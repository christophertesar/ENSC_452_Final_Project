
#include <stdio.h>
#include <xil_io.h>
#include <sleep.h>
#include <memory>
#include "xiicps.h"
#include <xil_printf.h>
#include <xparameters.h>
#include "xgpio.h"
#include "xtmrctr.h"
#include "xuartps.h"
#include "stdlib.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "xil_mmu.h"
#include "audio.h"
#include "AudioControl.h"
#include "AudioProtocol.h"

#define sev() __asm("sev")
#define ARM1_STARTADR 0xFFFFFFF0
#define ARM1_BASEADDR 0x10080000
#define COMM_VAL (*(volatile unsigned long *)(0xFFFF0000))

volatile bool TIMER_INTR_FLG;
XScuGic InterruptController; /* Instance of the Interrupt Controller */
static XScuGic_Config *GicConfig;/* The configuration parameters of thecontroller */

//Music Assets
extern const uint8_t americanfootball_left[];
extern const int americanfootball_left_size;
extern const uint8_t americanfootball_right[];
extern const int americanfootball_right_size;

extern const uint8_t something_left[];
extern const int something_left_size;
extern const uint8_t something_right[];
extern const int something_right_size;


/* ---------------------------------------------------------------------------- *
 * 									main()										*
 * ---------------------------------------------------------------------------- *
 * Runs all initial setup functions to initialise the audio codec and IP
 * peripherals, before calling the interactive menu system.
 * ---------------------------------------------------------------------------- */

static void audio_timer_interrupt_handler(void*);

static AudioControl audio_control = AudioControl(americanfootball_right_size/4, americanfootball_left, americanfootball_right);

void audio_timer_interrupt_handler(void *CallBackRef){
	XScuTimer* myTimer_LOCAL = (XScuTimer *) CallBackRef;
	if (audio_control.isSongPlaying()){
		uint64_t i = audio_control.getIndex();
		uint32_t vol = audio_control.getVolume();
		const uint8_t* left_channel = audio_control.getCurrentSongLeftChannel();
		const uint8_t* right_channel = audio_control.getCurrentSongRightChannel();

		uint32_t left = left_channel[i * 4]  << 24 | (left_channel[(i * 4) + 1] << 16) | (left_channel[(i * 4) + 2] << 8) | (left_channel[(i * 4) + 3]);
		uint32_t right = right_channel[i * 4]  << 24 | (right_channel[(i * 4) + 1] << 16) | (right_channel[(i * 4) + 2] << 8) | (right_channel[(i * 4) + 3]);

		left = left * vol;
		right = right * vol;

		Xil_Out32(I2S_DATA_TX_L_REG, left);
		Xil_Out32(I2S_DATA_TX_R_REG, right);

		audio_control.incrementIndex();
	}

	XScuTimer_ClearInterruptStatus(myTimer_LOCAL);
}

void Timer_InterruptHandler(XTmrCtr *data, u8 TmrCtrNumber)
{
	XTmrCtr_Stop(data,TmrCtrNumber);
	XTmrCtr_Reset(data,TmrCtrNumber);
	//Update Stuff
	TIMER_INTR_FLG = true;
}

int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr){
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler) XScuGic_InterruptHandler,
	XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}

/*Setup all interrupts of the system*/
int ScuGicInterrupt_Init(u16 DeviceId, XTmrCtr *TimerInstancePtr)
{
	int Status;
	GicConfig = XScuGic_LookupConfig(DeviceId);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig,
	GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*Connect a device driver handler that will be called when an interrupt for the device occurs, the device driver handler performs the specific interrupt processing for the device*/
	Status = XScuGic_Connect(&InterruptController,
	61,
	(Xil_ExceptionHandler)XTmrCtr_InterruptHandler,
	(void *)TimerInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

int main(void)
{
	//Configure the IIC data structure
	int Status;
	IicConfig(XPAR_XIICPS_0_DEVICE_ID);

	//Configure the Audio Codec's PLL
	AudioPllConfig();
	AudioConfigureJacks();

	xil_printf("Entering Main\r\n");
	//Configure the IIC data structure

	COMM_VAL = 0;
	//Disable cache on OCM
	// S=b1 TEX=b100 AP=b11, Domain=b1111, C=b0, B=b0
	Xil_SetTlbAttributes(0xFFFF0000, 0x14de2);

	xil_printf("ARM0: writing start address for ARM1\n\r");
	Xil_Out32(ARM1_STARTADR, ARM1_BASEADDR);
	dmb(); //waits until write has finished

	//Wake up core 1
	sev();

	XScuTimer my_Timer;
	XScuTimer_Config *Timer_Config;

	// Declare two structs.  One for the General Interrupt
	// Controller (GIC) instance, and the other for config information
	XScuGic my_Gic;
	XScuGic_Config *Gic_Config;

	Gic_Config = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);

	// Initialise the GIC using the config information
	Status = XScuGic_CfgInitialize(&my_Gic, Gic_Config, Gic_Config->CpuBaseAddress);

	// Look up the the config information for the timer
	Timer_Config = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);

	// Initialise the timer using the config information
	Status = XScuTimer_CfgInitialize(&my_Timer, Timer_Config, Timer_Config->BaseAddr);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &my_Gic);

	// Assign (connect) our interrupt handler for our Timer
	Status = XScuGic_Connect(&my_Gic, XPAR_SCUTIMER_INTR, (Xil_ExceptionHandler)audio_timer_interrupt_handler, (void *)&my_Timer);

	// Enable the interrupt *input* on the GIC for the timer's interrupt
	XScuGic_Enable(&my_Gic, XPAR_SCUTIMER_INTR);

	//XScuGic_SetPriorityTriggerType(&my_Gic, XPAR_SCUTIMER_INTR, 0x08, 3);

	// Enable the interrupt *output* in the timer.
	XScuTimer_EnableInterrupt(&my_Timer);

	Xil_ExceptionEnable();

	XScuTimer_LoadTimer(&my_Timer, SOUND_SAMPLING_PERIOD);

	// Enable Auto reload mode on the timer.  When it expires, it re-loads
	// the original value automatically.  This means that the timing interval
	// is never skewed by the time taken for the interrupt handler to run
	XScuTimer_EnableAutoReload(&my_Timer);

	// Start the SCU timer running (it counts down)
	XScuTimer_Start(&my_Timer);

	AudioControl* ac_ptr = &audio_control;

	int* signal_ptr = (int*) SIGNAL_BASE;

	/* Display interactive menu interface via terminal */
	while(1){
		if (*signal_ptr && SIGNAL){
			xil_printf("|%#010x|\r\n", *signal_ptr);
			if(*signal_ptr && START_SONG){
				ac_ptr->startSong();
			}
			else if(*signal_ptr && STOP_SONG){
				ac_ptr->stopSong();
			}
			else if(*signal_ptr && INCREMENT_VOLUME){
				ac_ptr->incrementVolume();
			}
			else if(*signal_ptr && DECREMENT_VOLUME){
				ac_ptr->decreaseVolume();
			}
			else if(*signal_ptr && RESTART_SONG){
				ac_ptr->restartSong();
			}
			else if(*signal_ptr && CHANGE_TO_SONG_1){
				ac_ptr->changeSong(americanfootball_left, americanfootball_right, americanfootball_right_size/4);
			}
			else if(*signal_ptr && CHANGE_TO_SONG_2){
				ac_ptr->changeSong(something_left, something_right, something_right_size/4);
			}
			else if(*signal_ptr && CHANGE_TO_SONG_3){
				ac_ptr->changeSong(something_left, something_right, something_right_size/4);
			}
			*signal_ptr = 0; // Clear the signal.
		}
	}
	// Disconnect the interrupt for the Timer.
    return 0;
}
